{"low":[{"cwe_ids":["89"],"id":"java_lang_sqli","title":"Unsanitized user input in SQL query","description":"## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_sqli","line_number":46,"full_filename":"juliet/src/testcases/CWE89_SQL_Injection/s03/CWE89_SQL_Injection__getParameter_Servlet_executeUpdate_01.java","filename":".","source":{"start":46,"end":46,"column":{"start":28,"end":125}},"sink":{"start":46,"end":46,"column":{"start":28,"end":125},"content":"sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\"+data+\"'\")"},"parent_line_number":46,"snippet":"sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\"+data+\"'\")","fingerprint":"79d5d495c5c408c582b32582f1ae9171_0","old_fingerprint":"bd59748b8048afd8288069b2152fa7ee_0","code_extract":"            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\"+data+\"'\");"}]}
